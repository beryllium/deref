<?php

$app = require __DIR__ . '/../bootstrap.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;

// Default (root) route - sets up the Angular controllers and defines the site appearance.
$app->get('/', function() use ($app) {
    $output = <<<END
<html>
  <head>
    <title>Deref</title>
    <link href="/components/bootstrap-default/css/bootstrap.min.css" rel="stylesheet"/>
    <link href="/components/bootstrap-default/css/bootstrap-theme.min.css" rel="stylesheet"/>
    <link href="/css/app.css" rel="stylesheet"/>
  </head>
  <body ng-app="DerefApp">
    <div id="deref" ng-app="DerefApp.controllers" ng-controller="derefController" class="container">
      <div class="row">
        <div class="col-md-6">

        <div class="jumbotron">
          <h1 class="text-uppercase">*<small>Deref</small></h1>
          <p class="lead text-primary">Ever come across a suspicious short URL and wanted to know where it <strong>really</strong> goes?</p>
          <p>Paste it here and find out!</p>
          <form ng-submit="submitForm()" role="form">
            <input type="url" class="input input-medium form-control" name="url" id="derefUrl" ng-model="derefUrl" placeholder="http://" required>
            <button type="submit" class="btn btn-primary btn-medium pull-right">Show Where It Goes &raquo;</button>
            <button type="reset" class="btn btn-default btn-medium pull-right" id="clearBtn">Clear</button>
          </form>
        </div>

        </div>
        <div class="col-md-6">

        <div class="panel panel-primary results-box">
          <div class="panel-heading">
            <h3 class="panel-title">Result</h3>
          </div>
          <div class="panel-body">
            <p id="Hops">This URL has {{ derefResponse.route_log.length - 1 }} redirect hop(s) to the final destination.</p>
          </div>
          <ul class="list-group">
            <li class="list-group-item"><strong>Domain:</strong> {{ derefResponse.final_domain }}</li>
            <li class="list-group-item"><strong>Final URL:</strong> {{ derefResponse.final_url }}</li>
            <li class="list-group-item"><strong>Redirect Log:</strong>
            <ul class="list-group">
                <li class="list-group-item"
                    ng-repeat="route in derefResponse.route_log">{{ \$index }} - {{route}}</li>
            </ul>
            </li>
          </ul>
        </div>

        </div>
      </div>
    </div>
    <script src="components/jquery/jquery.js"></script>
    <script src="components/bootstrap/js/bootstrap.min.js"></script>
    <script src="components/angularjs/angular.js"></script>
    <script src="components/angularjs/angular-route.js"></script>
    <script src="js/app.js"></script>
    <script src="js/services.js"></script>
    <script src="js/controllers.js"></script>
  </body>
</html>
END;

   return $output;
});

// Deref route - accepts a URL parameter and responds with the redirect log
$app->post('/deref', function(Request $request) use ($app) {
    $url = $request->get('url');

    // Reject non-HTTP or non-HTTPS URLs
    $url_type = getUrlType($url);
    if (!$url_type) {
        return new JsonResponse(['error' => 'Invalid URL'], 400);
    }

    // Trace the redirects generated by the submitted URL
    try {
        $result = getRedirectLog($url, $url_type);
    } catch (\TooManyRedirectsException $e) {
        return new JsonResponse(array('error' => 'Too Many Redirects'), 400);
    }

    // Prep the response and then send it in JSON
    $response = array(
        'start_url'    => $url,
        'final_url'    => end($result),
        'final_domain' => parse_url(end($result), PHP_URL_HOST),
        'route_log'    => $result,
    );

    return new JsonResponse($response);
});

$app->run();

/**
 * Determines if a URL is HTTP or HTTPS (and rejects those that aren't)
 *
 * @param  string       $url    The URL to check
 *
 * @return bool|string          "http", "https", or FALSE.
 */
function getUrlType($url)
{
    $url_type = false;
    if (strpos($url, 'http://') === 0) {
        $url_type = 'http';
    } else if (strpos($url, 'https://') === 0) {
        $url_type = 'https';
    }

    return $url_type;
}

/**
 * Follow all the redirects of a URL and return an array containing all results.
 *
 * This is a recursive method that calls itself until the redirect chain is exhausted or else
 * the max recursion depth is reached (>10 redirects, in this case)
 *
 * @param  string   $url    The URL to check
 * @param  string   $type   The type of the URL (http or https)
 * @param  int      $depth  (internal) The current recursion depth (starts at 0)
 *
 * @return array                        An array of URL matches
 * @throws TooManyRedirectsException    If recursion depth is exceeded
 */
function getRedirectLog($url, $type, $depth = 0)
{
    if ($depth > 10) {
        throw new TooManyRedirectsException('Too Many Redirects');
    }

    $curl = curl_init($url);
    $opts = array(
        CURLOPT_FOLLOWLOCATION => false,
        CURLOPT_HEADER         => true,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_CONNECTTIMEOUT => 2,
        CURLOPT_TIMEOUT        => 2,
        CURLOPT_NOBODY         => true,
        CURLOPT_USERAGENT      => 'deref', // fixes an issue with facebook redirecting to "/unsupported-browser"
    );

    // Only allow valid SSL hosts
    // This could cause some consternation in the real world, due to the complexity of SSL configuration on servers
    // (both those running the code, and those being talked to by the code)
    if ('https' == $type) {
        $opts[CURLOPT_SSL_VERIFYPEER] = true;
        $opts[CURLOPT_SSL_VERIFYHOST] = 2;
    }

    curl_setopt_array($curl, $opts);

    $result = curl_exec($curl);

    // Parse HTTP response headers (this is a somewhat delicate and probably ill-advised way to do this)
    if ($result) {
        $result = explode("\r\n", $result);

        foreach ($result as $key => $value) {
            $element = explode(': ', $value);

            if (count($element) == 2) {
                $result[strtolower($element[0])] = $element[1];
            }

            unset($result[$key]);
        }
    }

    // If the location header is set, that means we've got another redirect to follow
    // Call getUrlType to make sure it's HTTP or HTTPS
    // Recurse with a $depth + 1 to make sure we don't go too deep
    if (isset($result['location'])) {
        $type = getUrlType($result['location']);
        if ($type) {
            return (array_merge(array($url), getRedirectLog($result['location'], $type, $depth + 1)));
        }
    }

    return array($url);
}

// Too Many Redirects: https://www.youtube.com/watch?v=QrGrOK8oZG8
class TooManyRedirectsException extends Exception {}